		help.start()
		help(solve)
		sessionInfo()
		Sys.getenv()
		getwd()
        setwd()
		list.files(R.home())
		list.files(all.files = "TRUE")
		x <- 10
		X <- 5
		ls()
		rm(x)
		ls()
		library(help = "datasets")
		data()
		browseURL("http://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html")
		? iris
		View(anscombe)
		rm(list = ls())
		search()
		installed.packages()		
		?remove.packages 
	x <- 1:20
	y <- x > 13
	class(y)
	str(y)
hist(duration)
	attach(faithful) 	summary(eruptions)     fivenum(eruptions) plot(eruptions) hist(duration)
hist(duration)
hist(faithful$eruptions)
	hist(eruptions)
	hist(eruptions)
faithful$eruptions.freq
range(eruptions)
table(range(eruptions))
table(cut(range(eruptions), seq(1.5, 5.5, by=0.5)) table(cut(range(eruptions), seq(1.5, 5.5, by=0.5)))
	#4.3 Qualitative Analysis
table(cut(range(eruptions), seq(1.5, 5.5, by=0.5)))
seq(1.5, 5.5, by = .5)
	hist(eruptions)
	range(eruptions)
	seq(1.5, 5.5, by = .5)
	table(cut(range(eruptions), seq(1.5, 5.5, by = 0.5), right = FALSE))
	table(cut(range(faithful$eruptions), seq(1.5, 5.5, by = 0.5)))
	table(cut(faithful$eruptions, seq(1.5, 5.5, by = 0.5)))
	stem(duration)
	stem(eruptions)
View(faithful)
	?faithful
?chickwts
		x <- seq(1:10) 		m <- matrix(x, 2) 		m 		m[2,3]
?list()
pts <- list(x = cars[, 1], y = cars[, 2])
pts
cars
		plot(pts)
?matrix()
	attach(chickwts) 	aggregate(weight ~ feed, data = chickwts, mean)
	plot(aggregate(weight ~ feed, data = chickwts, mean))
	bikesSQL = "SELECT * FROM Production.Product"
	bikesDS2 <- RxOdbcData(sqlQuery = bikesSQL, connectionString = "DSN=MSSQLDSN;Uid=<username>;Pwd=<password>;")
hist(eruptions, seq(1.6, 5.2, 0.2), prob = TRUE) lines(density(eruptions, bw = 0.1)) rug(eruptions) # show the actual data points
	stem(eruptions)
	attach(faithful) 	### Examine the faithful dataset. What is it? What does it show? How can we graph the eruptions? 	?faithful
	stem(faithful$eruptions) 	hist(faithful$eruptions)
## make the bins smaller, make a plot of density hist(faithful$eruptions, seq(1.6, 5.2, 0.2), prob = TRUE) lines(density(faithful$eruptions, bw = 0.1)) rug(faithful$eruptions) # show the actual data points
## Two samples of data, showing the latent heat of the fusion of ice A <- c(79.98, 80.04, 80.02, 80.04, 80.03, 80.03, 80.04, 79.97, 80.05, 80.03, 80.02, 80.00, 80.02) B <- c(80.02, 79.94, 79.98, 79.97, 79.97, 80.03, 79.95, 79.97) boxplot(A, B)
### Are they significantly different? (yes) t.test(A, B)
filepath <- system.file("data", "morley.tab", package = "datasets") filepath
file.show(filepath)
comics
install.packages("dplyr")
?dplyr
?`dplyr-package`
	install.packages("dplyr", repos = "http://mran.revolutionanalytics.com")
	install.packages(c("hflights", "Lahman"))
vignette("introduction", package = "dplyr")
	x <- rnorm(15) 	y <- x + rnorm(15) 	predict(lm(y ~ x)) 	new <- data.frame(x = seq(-3, 3, 0.5)) 	predict(lm(y ~ x), new, se.fit = TRUE) 	pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction") 	pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence") 	matplot(new$x, cbind(pred.w.clim, pred.w.plim[, -1]), 		lty = c(1, 2, 2, 3, 3), type = "l", ylab = "predicted y")
	x <- rnorm(15) 	y <- x + rnorm(15) 	predict(lm(y ~ x))
	new <- data.frame(x = seq(-3, 3, 0.5)) 	predict(lm(y ~ x), new, se.fit = TRUE)
help.start()
q()
help.start()
sessionInfo()
q()
sessionInfo()
Sys.getenv()
getwd()
list.files(R.home())
list.files(all.files = "TRUE")
x <- 10
X <- 5
ls()
rm(x)
ls()
library(help = "datasets")
?iris
View(anscombe)
rm(list = ls())
search()
install.packages("dplyr")
update.packages(ask='graphics',checkBuilt=TRUE)
install.package(tidyverse)
install.packages(tidyverse)
utils:::menuInstallPkgs()
library(tidyverse)
read_csv('../data/geostat-2011/GEOSTAT_grid_POP_1K_2011_V2_0_1.csv') %>%
  rbind(read_csv('../data/geostat-2011/JRC-GHSL_AIT-grid-POP_1K_2011.csv') %>%
          mutate(TOT_P_CON_DT='')) %>%
  mutate(lat = as.numeric(gsub('.*N([0-9]+)[EW].*', '\\1', GRD_ID))/100,
         lng = as.numeric(gsub('.*[EW]([0-9]+)', '\\1', GRD_ID)) * ifelse(gsub('.*([EW]).*', '\\1', GRD_ID) == 'W', -1, 1) / 100) %>%
  filter(lng > 25, lng < 60) %>%
  group_by(lat=round(lat, 1), lng=round(lng, 1)) %>%
  summarize(value = sum(TOT_P, na.rm=TRUE))  %>%
  ungroup() %>%
  complete(lat, lng) %>%
  ggplot(aes(lng, lat + 5*(value/max(value, na.rm=TRUE)))) +
    geom_line(size=0.4, alpha=0.8, color='#5A3E37', aes(group=lat), na.rm=TRUE) +
    ggthemes::theme_map() +
    coord_equal(0.9)
x <- 1:10
y <- x > 5
class(y)
str(y)
### Create an object and cast an object to another class:
z <- 0:9
str(z)
digits <- as.character(z)
str(digits)
d <- as.integer(digits)
str(d)
is.character(d)
## Lengths of objects
e <- numeric() # an empty object
str(e)
length(e)
### Make an object of a given length:
e[3] <- 10
e
length(e)
str(e)
### Truncate the length:
length(e) <- 2
length(e)
e
### Clean up - use with care!
rm(list = ls())
#2.2.1 Vectors
### Vectors have implied distribution during operations. Set up two objects - x and y. Make x a vector from 1 to 10, and y a vector of 2 * x. Show both x 
### Vectors have implied distribution during operations. Set up two objects - x and y. Make x a vector from 1 to 10, and y a vector of 2 * x. Show both x 
### Vectors have implied distribution during operations. Set up two objects - x and y. Make x a vector from 1 to 10, and y a vector of 2 * x. Show both x 
        x <- 1:10
y <- 2 * x
x
y
y[4]
## Logical vectors are generated by conditions
temp1 <- x > 7
temp1
## And repetition is very useful
s5 <- rep(x, times = 5)
s5
### Make a new object that replicates the numbers 1-7, seven times:
z <- 1:5
s6 <- rep(z, each = 5)
s6
#2.2.2 Lists
## Lists can mix item types:
Lst <- list(name = "Fred", wife = "Mary", no.children = 3,
  child.ages = c(4, 7, 9))
Lst
        Lst[2]
Lst$name
Lst[["name"]]
### Create an object called pts that uses the cars sample data to create an x-value of the speed and a y-value of the distance. then type plot(pts) to 
### Create an object called pts that uses the cars sample data to create an x-value of the speed and a y-value of the distance. then type plot(pts) to 
### Create an object called pts that uses the cars sample data to create an x-value of the speed and a y-value of the distance. then type plot(pts) to 
q()
require(stats) # for lowess, rpois, rnorm
plot(cars)
lines(lowess(cars))
plot(sin, - pi, 2 * pi)
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10, main = "rpois(100, lambda = 5)")
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
A <- c(79.98, 80.04, 80.02, 80.04, 80.03, 80.03, 80.04, 79.97, 80.05, 80.03, 80.02, 80.00, 80.02)
B <- c(80.02, 79.94, 79.98, 79.97, 79.97, 80.03, 79.95, 79.97)
boxplot(A, B)
attach(faithful)
stem(faithful$eruptions)
barplot(x, y)
x <- c(1, 6, 7, 4, 1)
pie(x)
anscombe
str(anscombe)
plot(anscombe)
q()
		help.start()
		help(solve)
		sessionInfo()
data(cars)
		vignette("solve")
		vignette("plot()")
		? vignette
vignette("grid")
		example("solve")
		install.packages("lubridate")
vignette("lubridate")
startDate <-as.date
startDate <-as.Date("01/01/2017")
startDa
Start
startDate
startDate <-as.Date("01-01-2017")
startDate
startDate <-as.Date("2017-12-25")
start
startDate
endDate <- as.Date("2018-12-25")
elapsedDays <- endDate - startDate
elapsedDays
difftime(endDate, startDate, units = 'weeks')
info()
info
sqrt(1764)
data(cars)
dim(cars)
names(cars)
summary(cars)
plot(cars, xlab = "Speed (mph)", ylab = "Topping distance (ft)", las = 1, xlim = c(0, 25))
		help.start()
		help(solve)
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") } h8 <- hilbert(8); h8 sh8 <- solve(h8) round(sh8 %*% h8, 3)
help(vignette)
		help.search("solve")
		example("solve")
help(version)
### Show one example of the help function. Is there more than one way to do that?
Sys.getenv()
x <- Sys.getenv()
x
		getwd()
		list.files(R.home())
		save.image()
		x <- 10
		X <- 5
		ls()
		rm(x)
		ls()
rm(list = ls()) 
ls()
? rm()
		library(help = "datasets")
				data()
		browseURL("http://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html")
		?iris
		View(anscombe)
anscombe
fix(anscombe)
		x <- 1
		if (x > 1) "Higher than 1" else "Not higher than 1"
		x <- 10
		if (x > 1) "Higher than 1" else "Not higher than 1"
		0xFFFF
		i <- 5
		repeat { if (i > 25) break else { print(i); i <- i + 5; }}
		i <- 5
		while (i <= 25) { print(i); i <- i + 5; }
"Buck is awesome!"
		i <- 5
		while (i <= 25) { print("Buck is awesome"); i <- i + 5; }
		for (i in seq(from = 5, to = 25, by = 5))
			print(i)
		install.packages("iterators")
		library(iterators)
		i <- iter(1:5)
		nextElem(i)
		nextElem(i)
		nextElem(i)
		nextElem(i)
		nextElem(i)
		rm(list = ls())
		ls()
		search()
		library()
		installed.packages()
		library(help = "stats")
		.libPaths()
		install.packages("dplyr")
		update.packages()
	x <- 1:20
x
	y <- x > 15
	class(y)
class(x)
y
	str(y)
	z <- 0:9
	str(z)
	digits <- as.character(z)
	digits
	d <- as.integer(digits)
		str(d)
	is.character(d)
ls()
str(d)
str(digits)
	e <- numeric() # an empty object
	str(e)
	length(e)
	### Make an object of a given length:
	e[3] <- 10
	e
	str(e)
	length(e) <- 2
	e
	rm(list = ls())
        x <- 1:10
		y <- 2 * x
		x
		y
		y[4]
		temp1 <- x > 7
		temp1
		z <- 1:5
		s6 <- rep(z, each = 5)
		s6
					  child.ages = c(4, 7, 9))
		Lst <- list(name = "Fred", wife = "Mary", no.children = 3, 					  child.ages = c(4, 7, 9))
		Lst
		Lst$name
		Lst[["name"]]
		pts <- list(x = cars[, 1], y = cars[, 2])
		pts
plot(pts)
		x <- seq(1:20)
        m <- matrix(x, 2)
				m
		m[2, 3]
		z <- c(1:24)
str(z)
		dim(z) <- c(3, 4, 2)
		z
		z <- c(1:24)
				x <- array(1:20, dim = c(4, 5))
				x
		x[3, 2]
		x[3, 2] <- 0
x
		x1 <- c(1,2,3)
		x2 <- c(4, 5, 6, 7, 8, 9)
		matrix.name <- c("Mat1", "Mat2")
		column.name <- c("Col1", "Col2", "Col3")
		row.name <- c("Row1", "Row2", "Row3")
		y <- array(c(x1, x2),dim = c(3,3,2),dimnames = list(row.name,column.name,matrix.name))
		y
		rm(list = ls())
		x <- c(10, 20, 30)
		x <- c(10, 20, 30)
		y <- c("Red", "Green", "Blue")
		z <- c(TRUE, FALSE, TRUE)
		df <- data.frame(x, y, z)
		df
		## Dates - and the lubridate package
		startDate <- as.Date("2017-12-25")
		endDate <- as.Date("2018-12-25")
		elapsedDays <- endDate - startDate
		elapsedDays
		### Get the difference in dates in weeks
		difftime(endDate, startDate, units = 'weeks')
		install.packages("lubridate")
		vignette("lubridate")
		rm(list = ls())
		source("c:/temp/test.R")
		HousePrice <- read.table("c:\\temp\\houses.csv", header = TRUE)
        HVAC = read.table(file = file.choose())
		webdata <- read.csv("https://aql.datapress.com/leeds/dataset/polling-station-locations/2016-03-17T10:33:18/Polling%20stations.csv")
webdata
        sink("c:\\temp\\output.txt")
		        x <- 1:10
        x
		## Return to sending to StdOut
		sink()
		x <- iris
		write.table(x, "c:/temp/test.xls", sep = "\t")
	rm(list = ls())
	x <- cars
	str(x)
	mean(x$speed)
	median(x$speed)
	quantile(x$speed)
	sum(x$speed)
    sd(x$speed)
	rbind(x$speed)
	y = merge(x$speed, x$dist)
	y
	order(x$speed)
	?faithful
	attach(faithful)
	summary(eruptions)
	fivenum(eruptions)
	plot(eruptions)
	hist(eruptions)
	stem(eruptions)
	range(eruptions)
	table(cut(faithful$eruptions, seq(1.5, 5.5, by = 0.25)))
	?chickwts
	x <- aggregate(weight ~ feed, data = chickwts, mean)
	x
	plot(x)
	x <- rnorm(15)
x
	y <- x + rnorm(15)
y
	predict(lm(y ~ x))
	new <- data.frame(x = seq(-3, 3, 0.5))
	predict(lm(y ~ x), new, se.fit = TRUE)
	pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction")
	pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
	matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]), 	lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
		costCalc <- function(hours, ppl = 2) 		{ 			net.cost <- (hours * ppl)*25 			round(net.cost) 			if (net.cost > 1000) { print("You probably don't want to know. Or have as many meetings.") } 			else {print(net.cost) } 		} 		costCalc(25, 2)
install.packages("tm") install.packages("wordcloud") install.packages("SnowballC")
	require(stats) # for lowess, rpois, rnorm
	plot(cars)
	lines(lowess(cars))
	plot(sin, - pi, 2 * pi)
	plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10, main = "rpois(100, lambda = 5)")
	## Simple quantiles/ECDF, see ecdf() {library(stats)} for a better one
	plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
	points(x, cex = .5, col = "dark red")
	#5.2 Boxplot
	## Two samples of data, showing the latent heat of the fusion of ice
	A <- c(79.98, 80.04, 80.02, 80.04, 80.03, 80.03, 80.04, 79.97, 80.05, 80.03, 80.02, 80.00, 80.02)
	B <- c(80.02, 79.94, 79.98, 79.97, 79.97, 80.03, 79.95, 79.97)
	### Create a box plot using A and B data from above:
	boxplot(A, B)
#5.3 Histograms
	attach(faithful)
	?faithful
	stem(faithful$eruptions)
	hist(faithful$eruptions)
	barplot(x, y)
	x <- c(1, 6, 7, 4, 1)
	pie(x)
	anscombe
summary(anscombe)
plot(anscombe)
# An interesting experience, which puts your knowledge together -
# An interesting experience, which puts your knowledge together -
# Wordcloud in R
# https://cran.r-project.org/web/packages/wordcloud/wordcloud.pdf
require(tm)
require(wordcloud)
require(SnowballC)
x <- Corpus(DirSource("c:/test/"))
inspect(x)
x <- tm_map(x, stripWhitespace)
x <- tm_map(x, tolower)
x <- tm_map(x, removeWords, stopwords("english"))
x <- tm_map(x, stemDocument)
wordcloud(x, scale=c(5,0.5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE, colors=brewer.pal(8, "Dark2"))
wordcloud(x, scale=c(5,0.5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE, colors=brewer.pal(8, "Dark2"))
	### A far more common tool for qualitative selection and "wrangling" of data is dplyr. Use it: 	library(dplyr) 	# Documentation: https://www.r-project.org/nosvn/pandoc/dplyr.html
	install.packages(dplyr)
	install.packages("dplyr")
	library(dplyr)
	install.packages(c("hflights", "Lahman"))
	vignette("introduction", package = "dplyr")
		## You can perform math across arrays apply: array, data set, function 		x <- array(1:20, dim = c(4, 5)) 		x 		sums <- apply(x, 1, sum) # sum the rows across 		sums 		sums <- apply(x, 2, sum) # sum the columns down 		sums
		## You can perform math across arrays with apply: array, data set, function 		x 		sums <- apply(x, 1, sum) # sum the rows across 		sums 		sums <- apply(x, 2, sum) # sum the columns down 		sums 		### Clean up - use with care!
